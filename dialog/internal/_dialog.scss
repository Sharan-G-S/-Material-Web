//
// Copyright 2023 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

// go/keep-sorted start
@use 'sass:map';
@use 'sass:math';
// go/keep-sorted end
// go/keep-sorted start
@use '../../elevation/elevation';
@use '../../internal/sass/theme';
@use '../../tokens';
@use './tokens' as md-dialog-tokens;
// go/keep-sorted end

$_md-sys-color: tokens.md-sys-color-values-light();
$_md-sys-motion: tokens.md-sys-motion-values();

// Basing on https://m3.material.io/styles/motion/easing-and-duration/applying-easing-and-duration#27a05b8b-02b1-4695-a7e4-70797f205222
$_opening-transition-duration: map.get($_md-sys-motion, 'duration-medium4');
$_opening-transition-easing: map.get(
  $_md-sys-motion,
  'easing-emphasized-decelerate'
);
$_closing-transition-duration: map.get($_md-sys-motion, 'duration-short4');
$_closing-transition-easing: map.get(
  $_md-sys-motion,
  'easing-emphasized-accelerate'
);

@mixin styles() {
  $tokens: md-dialog-tokens.md-comp-dialog-values();
  $tokens: theme.create-theme-vars($tokens, 'dialog');

  :host {
    @each $token, $value in $tokens {
      --_#{$token}: #{$value};
    }
  }

  .dialog {
    position: fixed;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    inset: 0;
    block-size: 100dvh;
    inline-size: 100dvw;
    max-block-size: 100dvh;
    max-inline-size: 100dvw;
    border: none;
    background: transparent;
    padding: 0;
    margin: 0;
    overflow: clip;
  }

  // stylelint-disable-next-line selector-pseudo-class-no-unknown --
  // New platform pseudo-class
  .dialog:not(:modal) {
    z-index: 10000;
    pointer-events: none;
  }

  .dialog[open] {
    display: flex;
  }

  .dialog::backdrop {
    // Per spec, custom properties don't inherit to backdrop so we avoid using it.
    background: none;
  }

  // Hide scrim when modeless.
  :host([modeless]) .dialog::backdrop {
    display: none;
  }

  .container {
    position: absolute;

    inset-inline-start: var(--_container-inset-inline-start);
    inset-inline-end: var(--_container-inset-inline-end);
    inset-block-start: var(--_container-inset-block-start);
    inset-block-end: var(--_container-inset-block-end);

    background-color: var(--_container-color);
    border-radius: var(--_container-shape);
    display: flex;
    flex-direction: column;
    box-sizing: border-box;
    pointer-events: auto;
    min-block-size: var(--_container-min-block-size);
    max-block-size: var(--_container-max-block-size);
    min-inline-size: var(--_container-min-inline-size);
    max-inline-size: var(--_container-max-inline-size);
    padding-block-start: 24px;
    padding-block-end: 24px;
  }

  md-elevation {
    @include elevation.theme(
      (
        'level': var(--_container-elevation),
      )
    );
  }

  .container > * {
    box-sizing: border-box;
    // Apply pad left/right here so scrollbar is not indented.
    padding-inline-start: 24px;
    padding-inline-end: 24px;
  }

  .header {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 16px;
    -webkit-font-smoothing: antialiased;
    color: var(--_headline-color);
    font: var(--_headline-type);
  }

  .content {
    flex: 1;
    overflow: auto;
    margin-block-start: 16px;
    margin-block-end: 24px;
    -webkit-font-smoothing: antialiased;
    color: var(--_supporting-text-color);
    font: var(--_supporting-text-type);
  }

  .footer {
    display: flex;
    position: relative;
    flex-wrap: wrap;
    align-items: center;
    justify-content: flex-end;
    box-sizing: border-box;
    gap: 8px;
  }

  .footerHidden .content {
    margin-block-end: 0px;
  }

  .footerHidden .footer {
    display: none;
  }

  .stacked .footer {
    flex-direction: column;
    align-items: flex-end;
  }

  .scrollable .content {
    border-block-start: 1px solid transparent;
    border-block-end: 1px solid transparent;
  }

  .scroll-divider-header .content {
    border-block-start-color: map.get($_md-sys-color, 'outline');
  }

  .scroll-divider-footer:not(.footerHidden) .content {
    border-block-end-color: map.get($_md-sys-color, 'outline');
  }

  // Transitions for open/closed states
  .container {
    will-change: transform, opacity;
    transition-property: transform;
    overflow: hidden;
  }

  .container > * {
    transition-timing-function: inherit;
    transition-duration: inherit;
    transition-property: opacity, transform;
    will-change: transform, opacity;
    opacity: 0;
  }

  :host([showing-open]) .container > * {
    opacity: 1;
    transform: none;
  }

  :host([showing-open]) .container {
    opacity: 1;
    transform: none;
  }

  .dialog::backdrop {
    transition: background-color linear;
    background-color: transparent;
  }

  :host([showing-open]) .dialog::backdrop {
    background-color: rgb(0 0 0 / 32%);
  }

  :host([opening]) .dialog::backdrop {
    transition-duration: math.div($_opening-transition-duration, 2);
  }

  :host([closing]) .dialog::backdrop {
    transition-duration: math.div($_closing-transition-duration, 2);
  }

  :host([opening]) .container {
    transition-duration: $_opening-transition-duration;
    transition-timing-function: $_opening-transition-easing;
  }

  :host([closing]) .container {
    transition-duration: $_closing-transition-duration;
    transition-timing-function: $_closing-transition-easing;
  }

  :host([trasition][closing]) .container > * {
    transform: none;
    opacity: 0;
  }

  :host {
    --_opening-transform: scale(1, 0.1) translateY(-20%);
    --_closing-transform: scale(1, 0.9) translateY(-10%);
    --_origin: top;
    --_opening-content-transform: scale(1, 2);
    --_origin-footer: bottom;
  }

  .container {
    transform-origin: var(--_origin);
    transform: var(--_opening-transform);
  }

  .container > * {
    transform-origin: var(--_origin);
    transform: var(--_opening-content-transform);
  }

  .footer {
    transform-origin: var(--_origin-footer);
  }

  :host([closing]) {
    transform: var(--_closing-transform);
  }

  // fullscreen
  :host([showing-fullscreen]) {
    --_container-max-block-size: none;
    --_container-max-inline-size: none;
  }

  :host([showing-fullscreen]) .container {
    block-size: 100dvh;
    inline-size: 100dvw;
    border-radius: 0px;
    padding-block-start: 0;
    padding-block-end: 0;
  }

  :host([showing-fullscreen]) .header {
    justify-content: space-between;
    flex-direction: row;
    max-block-size: 56px;
    // Note, the 8px here is not per spec, but needed to make the explicit 56px not be cramped.
    padding-block-start: 8px;
    // TODO: should there be explicit tokens for these?
    padding-inline: 4px;
    gap: 4px;
  }

  :host([showing-fullscreen]) .content {
    margin-block-start: 0;
    margin-block-end: 0;
  }

  :host([showing-fullscreen]) .footer {
    max-block-size: 56px;
    // Note, the 8px here is not per spec, but needed to make the explicit 56px not be cramped.
    padding-block-end: 8px;
  }

  // Hide bottom divider on fullscreen since it's common not to have footer actions.
  :host([showing-fullscreen]) .scroll-divider-footer .content {
    border-block-end-color: transparent;
  }

  // High contrast mode
  @media screen and (forced-colors: active), (-ms-high-contrast: active) {
    .container {
      outline: windowtext solid 2px;
    }
  }

  // Slot styling
  [name='headline-prefix']::slotted(*),
  [name='headline-suffix']::slotted(*) {
    color: var(--_icon-color);
    font-size: var(--_icon-size);
  }

  [name='header']::slotted(*) {
    flex: 1;
    align-self: stretch;
    display: flex;
    align-items: center;
  }

  :host([showing-fullscreen]) [name='headline']::slotted(*) {
    flex: 1;
  }
}
