//
// Copyright 2021 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

// stylelint-disable selector-class-pattern --
// Selector '.md3-*' should only be used in this project.

@use 'sass:map';

@use '../../focus/lib/focus-ring-theme';
@use '../../sass/color';
@use '../../sass/resolvers';
@use '../../sass/shape';
@use '../../sass/theme';
@use '../../sass/var';
@use '../../tokens';

$_default-deps: (
  md-sys-color: tokens.md-sys-color-values-light-dynamic(),
  md-sys-elevation: tokens.md-sys-elevation-values(),
  md-sys-shape: tokens.md-sys-shape-values(),
  md-sys-state: tokens.md-sys-state-values(),
);

@function values($deps: $_default-deps, $exclude-hardcoded-values: false) {
  $values: tokens.md-comp-switch-values($deps, $exclude-hardcoded-values);

  // Add missing tokens.
  $values: map.merge(
    $values,
    (
      // TODO(b/230013081): remove this once the missing token is added.
      unselected-track-outline-color: map.get($deps, md-sys-color, outline)
    )
  );

  @return $values;
}

// PRIVATE PROPERTIES

$_touch-target-size: 48px;

$_selectors: (
  selected: '.md3-switch--selected',
  unselected: '.md3-switch--unselected',
);

$_selected: map.get($_selectors, selected);
$_unselected: map.get($_selectors, unselected);

// PUBLIC PROPERTIES

$light-theme: values();

$forced-colors-theme: (
  disabled-unselected-handle-opacity: 1,
  disabled-selected-icon-color: GrayText,
  disabled-selected-icon-opacity: 1,
  disabled-track-opacity: 1,
  disabled-unselected-icon-color: GrayText,
  disabled-unselected-icon-opacity: 1,
  selected-icon-color: ButtonText,
  unselected-icon-color: ButtonText,
);

@function _resolve-theme($theme, $resolvers) {
  $theme: shape.resolve-theme(
    $theme,
    map.get($resolvers, shape),
    track-shape,
    handle-shape
  );
  $theme: _flatten-disable-colors($theme);
  @return $theme;
}

@mixin theme($theme, $resolvers: resolvers.$material) {
  $theme: theme.validate-theme($light-theme, $theme);
  $theme: _resolve-theme($theme, $resolvers);
  $theme: theme.create-theme-vars($theme, switch);

  @include theme.emit-theme-vars($theme);
}

@mixin theme-styles($theme, $resolvers: resolvers.$material) {
  $theme: theme.validate-theme-styles($light-theme, $theme);
  $theme: _resolve-theme($theme, $resolvers);
  $theme: theme.create-theme-vars($theme, switch);

  .md3-switch {
    @include _root($theme);
  }

  .md3-switch__track {
    @include _track-selected($theme);
    &::before {
      @include _track-unselected($theme);
    }
  }

  .md3-switch__handle {
    @include _handle($theme);
    @include _handle-selected($theme);
    &::before {
      @include _handle-unselected($theme);
    }
  }

  .md3-switch__icon {
    @include _icon($theme);
  }
}

// PRIVATE API

@mixin _root($theme) {
  width: map.get($theme, track-width);
  height: map.get($theme, track-height);

  // Track shape
  border-start-start-radius: map.get($theme, track-shape-start-start);
  border-start-end-radius: map.get($theme, track-shape-start-end);
  border-end-end-radius: map.get($theme, track-shape-end-end);
  border-end-start-radius: map.get($theme, track-shape-end-start);

  @include _focus-ring(
    $width: map.get($theme, track-width),
    $height: map.get($theme, track-height)
  );
}

@mixin _focus-ring($height, $width) {
  $radius: min($height, $width);

  // TODO(b/230413957): remove the hard coded value
  @include focus-ring-theme.theme(
    (
      ring-radius: 22px,
    )
  );
}

// PRIVATE API - track

@mixin _track-selected($theme) {
  @include _track-selected-color(
    (
      default: map.get($theme, selected-track-color),
      disabled: map.get($theme, disabled-selected-track-color),
      focus: map.get($theme, selected-focus-track-color),
      hover: map.get($theme, selected-hover-track-color),
      pressed: map.get($theme, selected-pressed-track-color),
    )
  );
}

@mixin _track-selected-color($colors) {
  background-color: map.get($colors, default);

  #{$_selected}:hover & {
    background-color: map.get($colors, hover);
  }

  #{$_selected}:focus-visible & {
    background-color: map.get($colors, focus);
  }

  #{$_selected}:active & {
    background-color: map.get($colors, pressed);
  }

  #{$_selected}:disabled & {
    background-color: map.get($colors, disabled);
  }
}

@mixin _track-unselected($theme) {
  @include _track-unselected-color(
    (
      default: map.get($theme, unselected-track-color),
      disabled: map.get($theme, disabled-unselected-track-color),
      focus: map.get($theme, unselected-focus-track-color),
      hover: map.get($theme, unselected-hover-track-color),
      pressed: map.get($theme, unselected-pressed-track-color),
    )
  );

  @include _track-outline-color(
    (
      default: map.get($theme, unselected-track-outline-color),
      disabled: map.get($theme, disabled-unselected-track-outline-color),
      focus: map.get($theme, unselected-focus-track-outline-color),
      hover: map.get($theme, unselected-hover-track-outline-color),
      pressed: map.get($theme, unselected-pressed-track-outline-color),
    )
  );
}

@mixin _track-unselected-color($colors) {
  background-color: map.get($colors, default);

  #{$_unselected}:hover & {
    background-color: map.get($colors, hover);
  }

  #{$_unselected}:focus-visible & {
    background-color: map.get($colors, focus);
  }

  #{$_unselected}:active & {
    background-color: map.get($colors, pressed);
  }

  #{$_unselected}:disabled & {
    background-color: map.get($colors, disabled);
  }
}

@mixin _track-outline-color($colors) {
  border-color: map.get($colors, default);

  #{$_unselected}:hover & {
    border-color: map.get($colors, hover);
  }

  #{$_unselected}:focus-visible & {
    border-color: map.get($colors, focus);
  }

  #{$_unselected}:active & {
    border-color: map.get($colors, pressed);
  }

  #{$_unselected}:disabled & {
    border-color: map.get($colors, disabled);
  }
}

// PRIVATE API - handle

@mixin _handle($theme) {
  // Handle shape
  border-start-start-radius: map.get($theme, handle-shape-start-start);
  border-start-end-radius: map.get($theme, handle-shape-start-end);
  border-end-end-radius: map.get($theme, handle-shape-end-end);
  border-end-start-radius: map.get($theme, handle-shape-end-start);

  @include _handle-position(
    map.get($theme, track-height),
    map.get($theme, track-width)
  );

  @include _handle-size(
    (
      handle-height: map.get($theme, handle-height),
      handle-width: map.get($theme, handle-width),
      unselected-handle-height: map.get($theme, unselected-handle-height),
      unselected-handle-width: map.get($theme, unselected-handle-width),
      selected-handle-height: map.get($theme, selected-handle-height),
      selected-handle-width: map.get($theme, selected-handle-width),
      pressed-handle-height: map.get($theme, pressed-handle-height),
      pressed-handle-width: map.get($theme, pressed-handle-width),
    )
  );
}

@mixin _handle-position($track-height, $track-width) {
  $margin: calc($track-width - $track-height);

  #{$_selected} & {
    margin-inline-start: $margin;
  }

  #{$_unselected} & {
    margin-inline-end: $margin;
  }
}

@mixin _handle-size($sizes) {
  height: map.get($sizes, handle-height);
  width: map.get($sizes, handle-width);

  // TODO(b/230484095): Use token instead of hard coded values
  #{$_selected} & {
    transform: scale(1.2);
  }
  #{$_unselected} & {
    transform: scale(0.8);
  }
  #{$_selected}:enabled:active & {
    transform: scale(1.4);
  }
  #{$_unselected}:enabled:active & {
    transform: scale(1.4);
  }
}

@mixin _handle-selected($theme) {
  @include _selected-handle-color(
    (
      default: map.get($theme, selected-handle-color),
      disabled: map.get($theme, disabled-selected-handle-color),
      focus: map.get($theme, selected-focus-handle-color),
      hover: map.get($theme, selected-hover-handle-color),
      pressed: map.get($theme, selected-pressed-handle-color),
    )
  );
}

@mixin _selected-handle-color($colors) {
  background-color: map.get($colors, default);

  #{$_selected}:hover & {
    background-color: map.get($colors, hover);
  }

  #{$_selected}:focus-visible & {
    background-color: map.get($colors, focus);
  }

  #{$_selected}:active & {
    background-color: map.get($colors, pressed);
  }

  #{$_selected}:disabled & {
    background-color: map.get($colors, disabled);
  }
}

@mixin _handle-unselected($theme) {
  @include _unselected-handle-color(
    (
      default: map.get($theme, unselected-handle-color),
      disabled: map.get($theme, disabled-unselected-handle-color),
      focus: map.get($theme, unselected-focus-handle-color),
      hover: map.get($theme, unselected-hover-handle-color),
      pressed: map.get($theme, unselected-pressed-handle-color),
    )
  );
}

@mixin _unselected-handle-color($colors) {
  background-color: map.get($colors, default);

  #{$_unselected}:hover & {
    background-color: map.get($colors, hover);
  }

  #{$_unselected}:focus-visible & {
    background-color: map.get($colors, focus);
  }

  #{$_unselected}:active & {
    background-color: map.get($colors, pressed);
  }

  #{$_unselected}:disabled & {
    background-color: map.get($colors, disabled);
  }
}

// PRIVATE API - icons

@mixin _icon($theme) {
  // icon size

  #{$_selected} & {
    width: map.get($theme, selected-icon-size);
    height: map.get($theme, selected-icon-size);
  }

  #{$_unselected} & {
    width: map.get($theme, unselected-icon-size);
    height: map.get($theme, unselected-icon-size);
  }

  // icon color

  #{$_selected} & {
    fill: map.get($theme, selected-icon-color);
  }

  #{$_selected}:disabled & {
    fill: map.get($theme, disabled-selected-icon-color);
  }

  #{$_unselected} & {
    fill: map.get($theme, unselected-icon-color);
  }

  #{$_unselected}:disabled & {
    fill: map.get($theme, disabled-unselected-icon-color);
  }
}

@function _flatten-disable-colors($theme) {
  @return color.join-color-and-opacity-pairs(
    $theme,
    (
      // Disabled Handle
      (
          color-key: disabled-selected-handle-color,
          opacity-key: disabled-selected-handle-opacity
        ),
      (
        color-key: disabled-unselected-handle-color,
        opacity-key: disabled-unselected-handle-opacity
      ),
      // Disabled Track
      (
          color-key: disabled-selected-track-color,
          opacity-key: disabled-track-opacity
        ),
      (
        color-key: disabled-unselected-track-color,
        opacity-key: disabled-track-opacity
      ),
      (
        color-key: disabled-unselected-track-outline-color,
        opacity-key: disabled-track-opacity
      ),
      // Disabled Icon
      (
          color-key: disabled-selected-icon-color,
          opacity-key: disabled-selected-icon-opacity
        ),
      (
        color-key: disabled-unselected-icon-color,
        opacity-key: disabled-unselected-icon-opacity
      )
    )
  );
}
