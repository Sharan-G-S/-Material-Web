//
// Copyright 2022 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

@use 'sass:list';
@use 'sass:string';
@use 'sass:meta';
@use './var';
@use './string-ext';

///
/// @example - scss
///   @debug color-var-hex-to-rgba(var(--foo-color-on-surface, #8ab4f8), 0.38);
///   // rgb(var(--foo-color-on-surface-rgb, 138, 180, 248), 0.38))
/// @param {String} $var - CSS custom property string in var(--foo, #hex) format.
/// @param {Number} $opacity - Opacity to mix with given color.
/// @return {String} Returns color string in rgb() format containing
///     CSS custom property for comma separated rgb color.
@function color-var-hex-to-rgba($var, $opacity) {
  @if not var.is-var($var) {
    @error '#{$var} is not a valid custom property.';
  }

  @if meta.type-of($opacity) != 'number' {
    @error '#{$number} is not a valid number.';
  }

  $fallback: var.fallback($var);
  // var(--foo-color-rgb, 31,31,31)
  $var-rgb: var.create('#{var.name($var)}-rgb', hex-to-rgb($fallback));
  @return string.unquote('rgb(#{$var-rgb}, #{$opacity})');
}

$_hex: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9' 'a' 'b' 'c' 'd' 'e' 'f';

/// @example - scss
///   @debug _hex-to-dec('f8'); // 248
/// @param {String} $string - Hex number in string format.
/// @return {Number} Returns decimal number for given hex number.
@function _hex-to-dec($string) {
  $string: string.to-lower-case($string);
  $length: string.length($string);

  $dec: 0;
  @for $i from 1 through $length {
    $factor: 1 + (15 * ($length - $i));
    $index: list.index($_hex, string.slice($string, $i, $i));
    $dec: $dec + $factor * ($index - 1);
  }

  @return $dec;
}

/// @example - scss
///   @debug hex-to-rgb('#8ab4f8'); // 138, 180, 248
/// @param {String} $string - CSS hex color in string format including '#'.
/// @return {String} Returns comma separated rgb values in string format.
@function hex-to-rgb($string) {
  @if not string-ext.has-prefix($string, '#') {
    @error '#{$string} is not in CSS hex color format.';
  }

  $string-lower: string.to-lower-case($string);
  $r: '';
  $g: '';
  $b: '';
  $length: string.length($string);
  $max: if($length == 4, 1, 2);

  // Check for length accuracy
  @if $length != 4 and $length != 7 {
    @return $string;
  }

  // Loop from the second character (omitting #)
  @for $i from 2 through $length {
    $c: string.slice($string-lower, $i, $i);

    // If wrong character, return
    @if list.index($_hex, $c) == null {
      @return $string;
    }

    @if string.length($r) < $max {
      $r: $r + $c;
    } @else if string.length($g) < $max {
      $g: $g + $c;
    } @else if string.length($b) < $max {
      $b: $b + $c;
    }
  }

  @if $length == 4 {
    $r: $r + $r;
    $g: $g + $g;
    $b: $b + $b;
  }

  @return #{_hex-to-dec($r), _hex-to-dec($g), _hex-to-dec($b)};
}
