//
// Copyright 2021 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

// stylelint-disable selector-class-pattern --
// Selector '.md3-*' should only be used in this project.

@use 'sass:map';
@use '../../motion/animation';

$_animation-duration: 150ms;

@mixin static-styles() {
  .md3-field--outlined {
    .md3-field__start::before,
    .md3-field__end::after {
      @include start-and-end-shape-padding;
    }
  }

  .md3-field__outline {
    @include outline;
  }

  .md3-field__outline-start,
  .md3-field__outline-panel-inactive,
  .md3-field__outline-panel-active,
  .md3-field__outline-end {
    @include outline-border;
  }

  .md3-field__outline-start,
  .md3-field__outline-end {
    @include outline-edges;

    .md3-field:focus-within & {
      @include outline-edges-focus;
    }
  }

  .md3-field__outline-start {
    @include outline-start;
  }

  .md3-field__outline-end {
    @include outline-end;
  }

  .md3-field__outline-notch {
    @include outline-notch;

    .md3-field--no-label & {
      @include outline-notch-no-label;
    }
  }

  .md3-field__outline-panel-inactive,
  .md3-field__outline-panel-active {
    @include outline-panel;

    .md3-field--populated &,
    .md3-field:focus-within & {
      @include outline-panel-open;
    }
  }

  .md3-field__outline-panel-active {
    @include outline-panel-active;

    .md3-field:focus-within & {
      @include outline-panel-active-focus;
    }
  }
}

@mixin start-and-end-shape-padding() {
  // Add a child element that will grow to compensate for the outline's shape.
  // This is needed to prevent the outline border from clipping with the label
  // and is mirrored in the container padding to align the content and resting
  // label with the adjusted floating label.
  box-sizing: border-box;
  content: '';
  display: flex;
}

@mixin outline() {
  display: flex;
  // Allow events to target elements underneath the outline, such as icons.
  pointer-events: none;
  height: 100%;
  position: absolute;
  transition: animation.standard(border-color, $_animation-duration);
  width: 100%;
}

@mixin outline-border() {
  // ::before is inactive border, ::after is active border. Borders are
  // absolutely positioned within their elements.
  &::before,
  &::after {
    border: inherit;
    content: '';
    inset: 0;
    position: absolute;
  }
}

@mixin outline-edges() {
  border: inherit;
  border-radius: inherit;
  box-sizing: border-box;
  position: relative;

  &::before,
  &::after {
    border-bottom-style: solid;
    border-top-style: solid;
  }

  &::after {
    opacity: 0;
    transition: animation.standard(opacity, $_animation-duration);
  }
}

@mixin outline-edges-focus() {
  &::after {
    opacity: 1;
  }
}

@mixin outline-start() {
  &::before,
  &::after {
    border-inline-start-style: solid;
    border-inline-end-style: none;
    border-start-start-radius: inherit;
    border-start-end-radius: 0;
    border-end-start-radius: inherit;
    border-end-end-radius: 0;
  }
}

@mixin outline-end() {
  flex-grow: 1;

  &::before,
  &::after {
    border-inline-start-style: none;
    border-inline-end-style: solid;
    border-start-start-radius: 0;
    border-start-end-radius: inherit;
    border-end-start-radius: 0;
    border-end-end-radius: inherit;
  }
}

@mixin outline-notch() {
  align-items: flex-start;
  border: inherit;
  display: flex;
  position: relative;
}

@mixin outline-notch-no-label() {
  display: none;
}

@mixin outline-panel() {
  border: inherit;
  border-bottom-style: solid;
  inset: 0;
  position: absolute;

  &::before,
  &::after {
    border-top-style: solid;
    border-bottom: none;
    bottom: auto;
    transform: scaleX(1);
    transition: animation.standard(transform, $_animation-duration);
  }

  // Note: no need to do any RTL flipping here. If RTLCSS flips this, it's also
  // ok, we just need one to be left and one to be right.
  &::before {
    right: 50%;
    transform-origin: top left;
  }

  &::after {
    left: 50%;
    transform-origin: top right;
  }
}

@mixin outline-panel-open() {
  &::before,
  &::after {
    transform: scaleX(0);
  }
}

@mixin outline-panel-active() {
  opacity: 0;
  transition: animation.standard(opacity, $_animation-duration);
}

@mixin outline-panel-active-focus() {
  opacity: 1;
}
